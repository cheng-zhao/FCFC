# Configuration file for FCFC_2PT (default: `fcfc_2pt.conf').
# Format: keyword = value # comment
#     or: keyword = [element1, element2]
#    see: https://github.com/cheng-zhao/libcfg for details.
# Some of the entries allow expressions, see
#         https://github.com/cheng-zhao/libast for details.
# NOTE that command line options have priority over this file.
# Unnecessary entries can be left unset.

##########################################
#  Specifications of the input catalogs  #
##########################################

CATALOG         = 
    # Filename of the input catalogs, string or string array.
CATALOG_LABEL   = 
    # Label of the input catalogs, must be non-repetitive uppercase letters.
    # Character, same dimension as `CATALOG`.
    # If unset, catalogs are labelled in alphabetical order, i.e. [A,B,...].
CATALOG_TYPE    = 
    # File format of the input catalogs (unset: 0).
    # Integer, same dimension as `CATALOG`.
    # Allowed values are:
    # * 0: ASCII text file;
    # * 1: FITS table;
    # * 2: HDF5 file.
ASCII_SKIP      = 
    # Number of lines to be skipped for ASCII catalogs (unset: 0).
    # Long integer, same dimension as `CATALOG`.
ASCII_COMMENT   = 
    # Character indicating comment lines for ASCII catalogs (unset: '').
    # Character, same dimension as `CATALOG`.
    # Empty character ('') means disabling comments.
ASCII_FORMATTER = 
    # C99-style formatter for parsing lines of ASCII catalogs.
    # String, same dimension as `DATA_CATALOG` (e.g. "%d %ld %f %lf %s").
    # If a column is suppressed by *, it is not counted for the column number.
    # E.g., for "%d %*s %f", the float number corresponds to column $2.
    # See https://en.cppreference.com/w/c/io/fscanf for details on the format.
POSITION        = 
    # 3-D comoving coordinates, in the order of {RA,Dec,redshift} or {x,y,z}.
    # String array, 3 times the length of `CATALOG`.
    # They can be column indicator or expressions, e.g.,
    #     "($1 * ${10}) % 100" / "${RA}" / "${group/dataset(2)}"
    # Allowed values enclosed by ${}:
    # * long integer: column number of an ASCII file (starting from 1);
    # * string: column name of a FITS file;
    # * string(integer): dataset name and column index (starting from 1)
    #                    of an HDF5 file.
WEIGHT          = 
    # Weights for pair counts (unset: 1, i.e. no weight).
    # Column indicator or expression, same dimension as `DATA_CATALOG`.
SELECTION       = 
    # Selection criteria for the catalogs (unset: no selection).
    # Logical expression, same dimension as `CATALOG` (e.g. "$3 > 0.5").
COORD_CONVERT   = 
    # Boolean option, same dimension as `CATALOG` (unset: F).
    # If a scalar value is given, it is applied to all catalogs.
    # True (T) for converting the coordinates from {RA,Dec,redshift} to
    # the comoving {x,y,z}, given the fiducial cosmology set below.

##################################################
#  Fiducial cosmology for coordinate conversion  #
##################################################

OMEGA_M         = 
    # Density parameter of matter at z = 0.
    # Double-precision number.
OMEGA_LAMBDA    = 
    # Density parameter of Lambda at z = 0 (unset: 1 - `OMEGA_M`).
    # Double-precision number.
DE_EOS_W        = 
    # Dark energy equation of state: w (unset: -1).
    # Double-precision number.
CMVDST_ERR      = 
    # Error for comoving distance evaluation (unset: 1e-08).
    # Double-precision number.
Z_CMVDST_FILE   = 
    # Filename of a table for redshift to comoving distance conversion.
    # It must be a text file with two columns: {redshift, comoving distance}.
    # If this file is set, the cosmological parameters above are omitted.
    # Lines starting with '#' are omitted.

################################################################
#  Configurations for the 2-point correlation function (2PCF)  #
################################################################

DATA_STRUCT     = 
    # Data structure for evaluating pair counts, integer (unset: 0).
    # Allowed values are:
    # * 0: k-d tree;
    # * 1: ball tree.
BINNING_SCHEME  = 
    # Binning scheme of the 2PCFs, integer (unset: 0).
    # Allowed values are:
    # * 0: isotropic separation bins;
    # * 1: (s, mu) bins (required by 2PCF multipoles);
    # * 2: (s_perp, pi) bins (required by projected 2PCFs);
PAIR_COUNT      = 
    # Identifiers of pairs to be counted or read, string or string array.
    # Pairs are labelled by their source catalogs.
    # E.g., "DD" denotes auto pairs from the catalog 'D',
    # while "DR" denotes cross pairs from catalogs 'D' and 'R'.
PAIR_COUNT_FILE = 
    # Name of the files for storing pair counts.
    # String, same dimension as `PAIR_COUNT`.
    # Depending on `OVERWRITE`, pair counts can be read from existing files.
CF_ESTIMATOR    = 
    # Estimator of the 2PCFs to be evaluated, string or string array.
    # It must be an expression with pair identifiers.
CF_OUTPUT_FILE  = 
    # Name of the files for saving 2PCFs with the desired binning scheme.
    # String, same dimension as `CF_ESTIMATOR`.
MULTIPOLE       = 
    # Orders of Legendre multipoles to be evaluated, integer or integer array.
MULTIPOLE_FILE  = 
    # Name of the files for saving 2PCF multipoles.
    # String, same dimension as `CF_ESTIMATOR`.
PROJECTED_CF    = 
    # Boolean option, indicate whether computing the projected 2PCFs (unset: F).
PROJECTED_FILE  = 
    # Name of the files for saving projected 2PCFs.
    # String, same dimension as `CF_ESTIMATOR`.

#############################
#  Definitions of the bins  #
#############################

SEP_BIN_FILE    = 
    # Filename of the table defining edges of separation (or s_perp) bins.
    # It mush be a text file with two columns, for the lower and upper limits
    # of the distance bins, respectively.
    # Lines starting with '#' are omitted.
SEP_BIN_MIN     = 
SEP_BIN_MAX     = 
SEP_BIN_SIZE    = 
    # Lower and upper limits, and width of linear separation (or s_perp) bins.
    # Double-precision numbers. They are only used if `SEP_BIN_FILE` is unset.
MU_BIN_NUM      = 
    # Number of linear mu bins in the range [0,1), integer.
PI_BIN_FILE     = 
    # Filename of the table defining edges of pi (a.k.a. s_para) bins.
    # Lines starting with '#' are omitted.
PI_BIN_MIN      = 
PI_BIN_MAX      = 
PI_BIN_SIZE     = 
    # Lower and upper limits, and width of linear pi bins.
    # Double-precision numbers. They are only used if `PI_BIN_FILE` is unset.

####################
#  Other settings  #
####################

OUTPUT_FORMAT   = 
    # Format of the output `PAIR_COUNT_FILE`, integer (unset: 0).
    # Allowed values are:
    # * 0: FCFC binary format;
    # * 1: ASCII text format.
OVERWRITE       = 
    # Flag indicating whether to overwrite existing files, integer (unset: 0).
    # Allowed values are:
    # * 0: quit the program when an output file exist;
    # * 1: overwrite 2PCF files silently, but keep existing pair count files;
    # * 2 or larger: overwrite all files silently;
    # * negative: notify for decisions, and the maximum allowed number of failed
    #             trials are given by the absolute value of this number.
VERBOSE         = 
    # Boolean option, indicate whether to show detailed outputs (unset: T).
